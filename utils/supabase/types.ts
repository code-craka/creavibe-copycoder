/* eslint-disable */
// @ts-nocheck

// This file is generated by Supabase CLI
// Do not edit directly

// Basic JSON type
export type Json = any;

// Import the base Database type from the manually created file
import { Database as BaseDatabase } from '../../types/supabase';

// Extended Database interface with additional tables that are missing from the manually created type
export interface Database extends BaseDatabase {
  public: {
    Tables: {
      // Existing tables from BaseDatabase
      profiles: BaseDatabase['public']['Tables']['profiles'];
      api_tokens: BaseDatabase['public']['Tables']['api_tokens'];
      api_usage: BaseDatabase['public']['Tables']['api_usage'];
      invoices: BaseDatabase['public']['Tables']['invoices'];
      payment_methods: BaseDatabase['public']['Tables']['payment_methods'];
      
      // Additional tables that were missing
      audit_logs: {
        Row: {
          id: string;
          user_id: string | null;
          action: string;
          resource_type: string;
          resource_id: string | null;
          ip_address: string | null;
          user_agent: string | null;
          metadata: Json | null;
          created_at: string;
        };
        Insert: {
          id?: string;
          user_id?: string | null;
          action: string;
          resource_type: string;
          resource_id?: string | null;
          ip_address?: string | null;
          user_agent?: string | null;
          metadata?: Json | null;
          created_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string | null;
          action?: string;
          resource_type?: string;
          resource_id?: string | null;
          ip_address?: string | null;
          user_agent?: string | null;
          metadata?: Json | null;
          created_at?: string;
        };
        Relationships: [];
      };
      
      projects: {
        Row: {
          id: string;
          name: string;
          description: string | null;
          user_id: string;
          created_at: string;
          updated_at: string | null;
          repository_url: string | null;
          status: string;
        };
        Insert: {
          id?: string;
          name: string;
          description?: string | null;
          user_id: string;
          created_at?: string;
          updated_at?: string | null;
          repository_url?: string | null;
          status?: string;
        };
        Update: {
          id?: string;
          name?: string;
          description?: string | null;
          user_id?: string;
          created_at?: string;
          updated_at?: string | null;
          repository_url?: string | null;
          status?: string;
        };
        Relationships: [];
      };
      
      trusted_ips: {
        Row: {
          id: string;
          user_id: string;
          ip_address: string;
          created_at: string;
          description: string | null;
        };
        Insert: {
          id?: string;
          user_id: string;
          ip_address: string;
          created_at?: string;
          description?: string | null;
        };
        Update: {
          id?: string;
          user_id?: string;
          ip_address?: string;
          created_at?: string;
          description?: string | null;
        };
        Relationships: [];
      };
      
      notification_preferences: {
        Row: {
          id: string;
          user_id: string;
          email_marketing: boolean;
          email_product_updates: boolean;
          email_security: boolean;
          created_at: string;
        };
        Insert: {
          id?: string;
          user_id: string;
          email_marketing?: boolean;
          email_product_updates?: boolean;
          email_security?: boolean;
          created_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          email_marketing?: boolean;
          email_product_updates?: boolean;
          email_security?: boolean;
          created_at?: string;
        };
        Relationships: [];
      };
      
      notification_templates: {
        Row: {
          id: string;
          name: string;
          subject: string;
          body: string;
          created_at: string;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          name: string;
          subject: string;
          body: string;
          created_at?: string;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          name?: string;
          subject?: string;
          body?: string;
          created_at?: string;
          updated_at?: string | null;
        };
        Relationships: [];
      };
    };
    Views: BaseDatabase['public']['Views'];
    Functions: BaseDatabase['public']['Functions'];
    Enums: BaseDatabase['public']['Enums'];
  };
  
  // Add graphql_public namespace that was in the original generated types
  graphql_public: {
    Tables: Record<string, never>;
    Views: Record<string, never>;
    Functions: {
      graphql: {
        Args: {
          operationName?: string;
          query?: string;
          variables?: Json;
          extensions?: Json;
        };
        Returns: Json;
      };
    };
    Enums: Record<string, never>;
    CompositeTypes: Record<string, never>;
  };
}

// Helper types for working with tables
export type Tables<T extends keyof Database['public']['Tables']> = 
  Database['public']['Tables'][T]['Row'];

export type TablesInsert<T extends keyof Database['public']['Tables']> = 
  Database['public']['Tables'][T]['Insert'];

export type TablesUpdate<T extends keyof Database['public']['Tables']> = 
  Database['public']['Tables'][T]['Update'];

// Constants
export const Constants = {
  graphql_public: {
    Enums: {},
  },
  public: {
    Enums: {},
  },
} as const;